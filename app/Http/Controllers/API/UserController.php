<?php

namespace App\Http\Controllers\API;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\User; 
use Illuminate\Support\Facades\Auth; 
use Validator;

class UserController extends Controller
{
   public $successStatus = 200;

    public function login(){ 
        if(Auth::attempt(['mobileNumber' => request('mobileNumber'), 'password' => request('password')])){ 
            $user = Auth::user(); 
            $success['token'] =  $user->createToken('tmwallet')-> accessToken; 
            return response()->json(['success' => $success], $this-> successStatus); 
        } 
        else{ 
            return response()->json(['error'=>'Unauthorised'], 401); 
        } 
    }
 public function deleteAllusers()
 {
   $res=User::truncate();
   echo "Deleted all users";
   
 }
    public function register(Request $request) 
    { 
        $validator = Validator::make($request->all(), [ 
            'name' => 'required', 
            'mobileNumber' => 'required|unique:users', 
            'password' => 'required|digits:4', 
            'c_password' => 'required|same:password', 
        ]);
if ($validator->fails()) { 
            return response()->json(['error'=>$validator->errors()], 401);            
        }
$input = $request->all(); 
        $input['password'] = bcrypt($input['password']); 
        $user = User::create($input); 
        $success['token'] =  $user->createToken('tmwallet')-> accessToken; 
        $success['name'] =  $user->name;
return response()->json(['success'=>$success], $this-> successStatus); 
    }

    public function details() 
    { 
        $user = Auth::user(); 
        return response()->json(['success' => $user], $this-> successStatus); 
    } 
    
    function changePassword(Request $request) {
     $data = $request->all();
     //: $user = Auth::user(); 

        $validator = Validator::make($request->all(), [ 
      
            'newPassword' => 'required|digits:4', 
             'oldPassword' => 'required', 
             'mobileNumber' => 'required', 

        ]);
if ($validator->fails()) { 
            return response()->json(['error'=>$validator->errors()], 401);            
        }
     //Changing the password only if is different of null

         //checking the old password first
         $check  = Auth::attempt(['mobileNumber' => request('mobileNumber'), 'password' => request('oldPassword')]);
         if($check) {
             $user = Auth::user(); 
             $user->password = bcrypt($data['newPassword']);
             //$user->isFirstTime = false; //variable created by me to know if is the dummy password or generated by user.
             //print_r($user->token());die;
             
                    foreach ($user->tokens as $token) {
                        $token->revoke();
                    }

             $token = $user->createToken('tmwallet')->accessToken;

             //Changing the type
             $user->save();

             $success['token'] =  $user->createToken('tmwallet')-> accessToken; 
             $success['name'] =  $user->name;
             return response()->json(['success'=>$success], $this-> successStatus); 
         }
         else {
                        return response()->json(['error'=>'Unauthorised'], 401); 
         }
     

 }
 
 
 
 
      function cp(Request $request) {
     $data = $request->all();
     //: $user = Auth::user(); 

        $validator = Validator::make($request->all(), [ 
      
            'password' => 'required|digits:4', 
             'c_password' => 'required|same:password', 
             'mobileNumber' => 'required', 

        ]);
if ($validator->fails()) { 
            return response()->json(['error'=>$validator->errors()], 401);            
        }
     //Changing the password only if is different of null

         //checking the old password first
             $user = User::where('mobileNumber', $request->post('mobileNumber'))->update(['password'=>bcrypt($data['password'])]); 
         if($user) {
             
             
             Auth::attempt(['mobileNumber' => request('mobileNumber'), 'password' => request('password')]);  
             $u = Auth::user(); 
             $success['token'] =  $u->createToken('tmwallet')-> accessToken; 
             $success['name'] =  $u->name;
             return response()->json(['success'=>$success], $this-> successStatus); 
         }
         else {
                        return response()->json(['error'=>'Unauthorised'], 401); 
         }
     

 }
 
 
 
 
}


